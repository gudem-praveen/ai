# Aim: Write a Program to Implement an 8-puzzle problem using Python. 
# Algorithm: 
# Step 1: Define the Problem State 
# • Represent the puzzle as a 3x3 matrix (list of lists). 
# • Define the goal state [[1, 3, 0], [6, 8, 4], [7, 5, 2]]where 0 represents 
# the blank space). 
# • Track the possible moves (left, right, up, down). 
# Step 2: Implement a Search Algorithm 
# • Use A search algorithm (A-star)* with the Manhattan distance heuristic: 
# o f(n) = g(n) + h(n), where: 
# ▪ g(n): Number of moves taken from the initial state. 
# ▪ h(n): Estimated cost to reach the goal (Manhattan distance). 
# Step 3: Define Helper Functions 
# 1. Find the blank space (0). 
# 2. Generate valid moves and new states. 
# 3. Check if a state is the goal state. 
# 4. Implement the heuristic function (Manhattan distance). 
# 5. Use a priority queue (min-heap) to explore states efficiently. 
# Step 4: Solve the Puzzle 
# • Start with the initial state. 
# • Use a priority queue (min-heap) to expand the state with the lowest f(n). 
# • If the goal state is reached, return the sequence of moves. 
# • Continue until a solution is found or no solution exists. 
# SOURCE CODE : 
from collections import deque 
def bfs(start_state): 
    target = [1, 2, 3, 4, 5, 6, 7, 8 , 0] 
dq = deque([start_state]) 
visited = {tuple(start_state): None} 
while dq: 
    state = dq.popleft() 
    if state == target: 
        path = [] 
    while state: 
path.append(state) 
state = visited[tuple(state)] 
return path[::-1] 
zero = state.index(0) 
row, col = divmod(zero, 3) 
for move in (-3, 3, -1, 1): 
new_row, new_col = divmod(zero + move, 3) 
if 0 <= new_row < 3 and 0 <= new_col < 3 and abs(row - new_row) + abs(col - 
new_col) == 1: 
neighbor = state[:] 
neighbor[zero], neighbor[zero + move] = neighbor[zero + move], neighbor[zero] 
if tuple(neighbor) not in visited: 
visited[tuple(neighbor)] = state 
dq.append(neighbor) 
def printSolution(path): 
for state in path: 
print("\n".join(' '.join(map(str, state[i:i+3])) for i in range(0, 9, 3)), end="\n ----- \n") 
# Example Usage 
startState = [1, 3, 0 , 6, 8, 4, 7, 5, 2] 
solution = bfs(startState) 
if solution: 
printSolution(solution) 
print(f"Solved in {len(solution) - 1} moves.") 
else: 
print("No solution found.") 
OUTPUT : 
1 3 0 
6 8 4 
7 5 2 
1 3 4 
6 8 0 
7 5 2 
1 3 4 
6 8 2 
7 5 0 
1 3 4 
6 8 2 
7 0 5 
. 
. 
. 
1 2 3 
4 5 0 
7 8 6 
1 2 3 
4 5 6 
7 8 0 
Solved in 20 moves.